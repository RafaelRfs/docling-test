#!/usr/bin/env python3
"""
Script para listar todos os clusters e services que utilizam FARGATE_SPOT na conta AWS.
"""
import boto3
from botocore.exceptions import ClientError

def list_fargate_spot_services():
    ecs = boto3.client('ecs')
    try:
        # Obter todos os clusters
        clusters = []
        paginator = ecs.get_paginator('list_clusters')
        for page in paginator.paginate():
            clusters.extend(page.get('clusterArns', []))

        # Coletar serviços FARGATE_SPOT
        spot_services = []
        for cluster_arn in clusters:
            service_arns = []
            svc_paginator = ecs.get_paginator('list_services')
            for svc_page in svc_paginator.paginate(cluster=cluster_arn):
                service_arns.extend(svc_page.get('serviceArns', []))

            if not service_arns:
                continue

            # Describe em lotes de 10 (limite da API)
            for i in range(0, len(service_arns), 10):
                batch = service_arns[i : i + 10]
                resp = ecs.describe_services(cluster=cluster_arn, services=batch)
                for svc in resp.get('services', []):
                    # Verifica estratégia de capacity providers
                    cp_strategy = svc.get('capacityProviderStrategy', [])
                    if any(cp.get('capacityProvider') == 'FARGATE_SPOT' for cp in cp_strategy):
                        spot_services.append((cluster_arn, svc.get('serviceName')))
        return spot_services
    except ClientError as e:
        print(f"Erro ao comunicar com ECS: {e}")
        return []

if __name__ == '__main__':
    services = list_fargate_spot_services()
    if services:
        print("Clusters e Serviços usando FARGATE_SPOT:")
        for cluster, svc in services:
            print(f"Cluster: {cluster}  Service: {svc}")
    else:
        print("Nenhum serviço FARGATE_SPOT encontrado.")
